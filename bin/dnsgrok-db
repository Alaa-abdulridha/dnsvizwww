#!/usr/bin/env python
#
# This file is a part of DNSViz, a tool suite for DNS/DNSSEC monitoring,
# analysis, and visualization.
# Created by Casey Deccio (casey@deccio.net)
#
# Copyright 2014-2015 VeriSign, Inc.
# 
# DNSViz is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# DNSViz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import codecs
import collections
import getopt
import json
import logging
import re
import sys

import dns.exception, dns.message, dns.name

import django

from dnsvizwww.analysis import OfflineDomainNameAnalysis
from dnsviz.util import get_trusted_keys

django.setup()

logger = logging.getLogger('dnsviz.analysis.offline')

def usage(err=None):
    if err is not None:
        err += '\n\n'
    else:
        err = ''
    sys.stderr.write( '''%sUsage: %s [ options ] ( -f <filename> | <domain name> [... ] )
Options:
    -f <filename>  - read names from a file (one name per line), instead of from command line
    -t <filename>  - use filename as a file containing trusted keys, each as DNSKEY RRs in zone file format
    -o <filename>  - save the output to filename instead of to stdout
    -p             - make json output pretty instead of minimal.
    -l <loglevel>  - set log level to one of: error, warning, info, debug
''' % (err, sys.argv[0]))

def test_m2crypto():
    try:
        import M2Crypto
    except ImportError:
        sys.stderr.write('''Warning: M2Crypto is not installed; cryptographic validation of signatures and digests will not be available.\n''')

def main():
    try:
        test_m2crypto()

        try:
            opts, args = getopt.getopt(sys.argv[1:], 'f:t:o:pl:')
        except getopt.GetoptError, e:
            usage(str(e))
            sys.exit(1)

        opts = dict(opts)
        if not ('-f' in opts or args):
            usage('Either -f must be used or domain names must be supplied as command line arguments.')
            sys.exit(1)
        if '-f' in opts and args:
            usage('If -f is used, then domain names may not supplied as command line arguments.')
            sys.exit(1)

        if '-l' in opts:
            if opts['-l'] == 'error':
                loglevel = logging.ERROR
            elif opts['-l'] == 'warning':
                loglevel = logging.WARNING
            elif opts['-l'] == 'info':
                loglevel = logging.INFO
            elif opts['-l'] == 'debug':
                loglevel = logging.DEBUG
            else:
                usage('Invalid log level: "%s"' % opts['-l'])
                sys.exit(1)
        else:
            loglevel = logging.DEBUG
        has_handler = False
        # check if there's already a StreamHandler that allows messages through the
        # filters by default
        for handler in logger.handlers:
            if isinstance(handler, logging.StreamHandler):
                if False not in [f.filter(None) for f in handler.filters]:
                    has_handler = True
                    break
        if not has_handler:
            handler = logging.StreamHandler()
            handler.setLevel(loglevel)
            logger.addHandler(handler)
        logger.setLevel(loglevel)

        names = []
        if '-f' in opts:
            try:
                f = codecs.open(opts['-f'], 'r', 'utf-8')
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, opts['-f']))
                sys.exit(2)
            for line in f:
                name = line.strip()
                try:
                    name = dns.name.from_unicode(name)
                except UnicodeDecodeError, e:
                    logger.error('%s: "%s"' % (e, name))
                except dns.exception.DNSException:
                    logger.error('The domain name was invalid: "%s"' % name)
                else:
                    names.append(name)
            f.close()
        else:
            for name in args:
                try:
                    name = dns.name.from_text(name)
                except dns.exception.DNSException:
                    logger.error('The domain name was invalid: "%s"' % name)
                else:
                    names.append(name)

        if '-p' in opts:
            kwargs = { 'indent': 4, 'separators': (',', ': ') }
        else:
            kwargs = {}

        if '-o' not in opts or opts['-o'] == '-':
            fh = sys.stdout
        else:
            try:
                fh = open(opts['-o'], 'w')
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, opts['-o']))
                sys.exit(2)


        if '-t' in opts:
            try:
                tk_str = open(opts['-t']).read()
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, opts['-t']))
                sys.exit(2)
            try:
                trusted_keys = get_trusted_keys(tk_str)
            except dns.exception.DNSException:
                logger.error('There was an error parsing the trusted keys file: "%s"' % opts['-t'])
                sys.exit(2)
        else:
            trusted_keys = ()

        cache = {}
        name_objs = []
        for name in names:
            try:
                name_obj = OfflineDomainNameAnalysis.objects.filter(name=name, stub=False).latest()
            except OfflineDomainNameAnalysis.DoesNotExist:
                logger.error('The domain name analysis was not found in the database: "%s"' % name.to_text())
                continue
            name_obj.retrieve_all(cache=cache)
            name_objs.append(name_obj)

        if not name_objs:
            sys.exit(2)

        d = collections.OrderedDict()
        for name_obj in name_objs:
            name_obj.populate_status(trusted_keys)
            name_obj.serialize_status(d, loglevel=loglevel)

        if d:
            fh.write(json.dumps(d, **kwargs))

    except KeyboardInterrupt:
        logger.error('Interrupted.')
        sys.exit(4)

if __name__ == "__main__":
    main()
