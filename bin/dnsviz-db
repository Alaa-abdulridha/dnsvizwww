#!/usr/bin/env python
#
# This file is a part of DNSViz, a tool suite for DNS/DNSSEC monitoring,
# analysis, and visualization.
# Created by Casey Deccio (casey@deccio.net)
#
# Copyright 2014-2015 VeriSign, Inc.
# 
# DNSViz is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# DNSViz is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

import codecs
import getopt
import json
import logging
import os
import re
import sys

import dns.exception, dns.message, dns.name

import django

from dnsvizwww.analysis import OfflineDomainNameAnalysis
from dnsviz.config import DNSVIZ_SHARE_PATH
from dnsviz.viz.dnssec import DNSAuthGraph
from dnsviz.util import get_trusted_keys

django.setup()

MEDIA_URL = 'file://' + DNSVIZ_SHARE_PATH
DNSSEC_TEMPLATE_FILE = os.path.join(DNSVIZ_SHARE_PATH, 'html', 'dnssec-template.html')

logger = logging.getLogger('dnsviz.analysis.offline')

def usage(err=None):
    if err is not None:
        err += '\n\n'
    else:
        err = ''
    sys.stderr.write('''%sUsage: %s [ options ] ( -f <filename> | <domain name> [... ] )
Options:
    -f <filename>  - read names from a file (one name per line), instead of from command line
    -t <filename>  - use filename as a file containing trusted keys, each as DNSKEY RRs in zone file format
    -O             - derive the filename(s) from the format provided to -T and the domain name(s)
    -o <filename>  - save the image to filename instead of to stdout
    -T <format>    - the format of the output (dot, png, jpg, svg, html)
''' % (err, sys.argv[0]))

def finish_graph(G, trusted_keys, fmt, filename):
    G.add_trust(trusted_keys)
    G.remove_extra_edges()

    if fmt == 'html':
        js_img = G.draw('js')

        template_str = codecs.open(DNSSEC_TEMPLATE_FILE, 'r', 'utf-8').read()
        template_str = template_str.replace('MEDIA_URL', MEDIA_URL)
        template_str = template_str.replace('JS_CODE', js_img)
        if filename is None:
            return template_str
        else:
            try:
                codecs.open(filename, 'w', 'utf-8').write(template_str)
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, filename))
    else:
        if filename is None:
            return G.draw(fmt)
        else:
            try:
                G.draw(fmt, path=filename)
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, filename))

def test_m2crypto():
    try:
        import M2Crypto
    except ImportError:
        sys.stderr.write('''Warning: M2Crypto is not installed; cryptographic validation of signatures and digests will not be available.\n''')

def test_pygraphviz():
    try:
        from pygraphviz import release
        try:
            major, minor = release.version.split('.')[:2]
            major = int(major)
            minor = int(re.sub(r'(\d+)[^\d].*', r'\1', minor))
            if (major, minor) < (1,1):
                sys.stderr.write('''pygraphviz version >= 1.1 is required, but version %s is installed.\n''' % release.version)
                sys.exit(3)
        except ValueError:
            sys.stderr.write('''pygraphviz version >= 1.1 is required, but version %s is installed.\n''' % release.version)
            sys.exit(3)
    except ImportError:
        sys.stderr.write('''pygraphviz is required, but not installed.\n''')
        sys.exit(3)

def main():
    try:
        test_m2crypto()
        test_pygraphviz()

        try:
            opts, args = getopt.getopt(sys.argv[1:], 'f:t:Oo:T:')
        except getopt.GetoptError, e:
            usage(str(e))
            sys.exit(1)

        opts = dict(opts)
        if not ('-f' in opts or args):
            usage('Either -f must be used or domain names must be supplied as command line arguments.')
            sys.exit(1)
        if '-f' in opts and args:
            usage('If -f is used, then domain names may not supplied as command line arguments.')
            sys.exit(1)

        if '-T' in opts:
            fmt = opts['-T']
        elif '-o' in opts:
            fmt = opts['-o'].split('.')[-1]
        else:
            fmt = 'dot'
        if fmt not in ('dot','png','jpg','svg','html'):
            usage('Image format unrecognized: "%s"' % fmt)
            sys.exit(1)

        if '-o' in opts and '-O' in opts:
            usage('The -o and -O options may not be used together.')
            sys.exit(1)

        loglevel = logging.WARNING
        handler = logging.StreamHandler()
        handler.setLevel(loglevel)
        logger.addHandler(handler)
        logger.setLevel(loglevel)

        names = []
        if '-f' in opts:
            try:
                f = codecs.open(opts['-f'], 'r', 'utf-8')
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, opts['-f']))
                sys.exit(2)
            for line in f:
                name = line.strip()
                try:
                    name = dns.name.from_unicode(name)
                except UnicodeDecodeError, e:
                    logger.error('%s: "%s"' % (e, name))
                except dns.exception.DNSException:
                    logger.error('The domain name was invalid: "%s"' % name)
                else:
                    names.append(name)
            f.close()
        else:
            for name in args:
                try:
                    name = dns.name.from_text(name)
                except dns.exception.DNSException:
                    logger.error('The domain name was invalid: "%s"' % name)
                else:
                    names.append(name)


        if '-t' in opts:
            try:
                tk_str = open(opts['-t']).read()
            except IOError, e:
                logger.error('%s: "%s"' % (e.strerror, opts['-t']))
                sys.exit(2)
            try:
                trusted_keys = get_trusted_keys(tk_str)
            except dns.exception.DNSException:
                logger.error('There was an error parsing the trusted keys file: "%s"' % opts['-t'])
                sys.exit(2)
        else:
            trusted_keys = ()

        name_objs = []
        cache = {}
        for name in names:
            try:
                name_obj = OfflineDomainNameAnalysis.objects.filter(name=name, stub=False).latest()
            except OfflineDomainNameAnalysis.DoesNotExist:
                logger.error('The analysis of "%s" was not found in the database.' % name.to_text())
                continue
            name_obj.retrieve_all(cache=cache)
            name_objs.append(name_obj)

        if not name_objs:
            sys.exit(2)

        G = DNSAuthGraph()
        for name_obj in name_objs:
            name_obj.populate_status(trusted_keys)
            for qname, rdtype in name_obj.queries:
                if rdtype in (dns.rdatatype.NS, dns.rdatatype.DNSKEY, dns.rdatatype.DS, dns.rdatatype.DLV):
                    continue
                #XXX filter negative responses
                #if (qname, rdtype) in name_obj.nxdomain_servers_clients or \
                #        (qname, rdtype) in name_obj.noanswer_servers_clients:
                #    continue
                G.graph_rrset_auth(name_obj, qname, rdtype)

            if '-O' in opts:
                if name_obj.name == dns.name.root:
                    name = 'root'
                else:
                    name = name_obj.name.canonicalize().to_text().rstrip('.')
                finish_graph(G, trusted_keys, fmt, '%s.%s' % (name, fmt))
                G = DNSAuthGraph()

        if '-O' not in opts:
            if '-o' not in opts or opts['-o'] == '-':
                filename = None
                img = finish_graph(G, trusted_keys, fmt, filename)
                sys.stdout.write(img)
            else:
                finish_graph(G, trusted_keys, fmt, opts['-o'])

    except KeyboardInterrupt:
        logger.error('Interrupted.')
        sys.exit(4)

if __name__ == "__main__":
    main()
